# Assuming features_engineering function is already defined

# Apply features engineering on the train and validation datasets
train_data_key, train_data_target, train_data_feature = features_engineering(df=train_nonzero_lines, prod=False)
val_data_key, val_data_target, val_data_feature = features_engineering(df=val_nonzero_lines, prod=False)
full_val_data_key, full_val_data_target, full_val_data_feature = features_engineering(df=val_data, prod=False)

# Get the shapes of the target DataFrames
train_data_target_shape = (train_data_target.count(), len(train_data_target.columns))
val_data_target_shape = (val_data_target.count(), len(val_data_target.columns))
full_val_data_target_shape = (full_val_data_target.count(), len(full_val_data_target.columns))

# Display the shapes
print("Full Validation Data Target Shape:", full_val_data_target_shape)
print("Validation Data Target Shape:", val_data_target_shape)
print("Training Data Target Shape:", train_data_target_shape)

# Combine DataFrames
check_df = train_data_key.join(train_data_feature, on=['key_column'], how='inner').join(train_data_target, on=['key_column'], how='inner')

# Select specific columns
cols = ['duns_loc_num', 'total_employee_count', 'pq_lis_1mth', 'emp_tot_num']
check_df_p = check_df.select(*cols)

# Show the result
check_df_p.show()
