Here's the conversion of the given function into a **PySpark** function. The approach focuses on the `PySpark DataFrame` API, handling groupings, joins, and transformations using `pyspark.sql` functions.

### PySpark Version of the `features_engineering` Function:

```python
from pyspark.sql import functions as F
from pyspark.sql import DataFrame
from pyspark.sql.window import Window


def features_engineering_spark(df: DataFrame, prod: bool):
    """
    Get features for regression model training using PySpark DataFrame.
    
    Args:
        df (DataFrame): Input PySpark DataFrame with original 3mth and 1mth features and target.
        prod (bool): True for prod data, False for non-prod data.
    
    Returns:
        DataFrame: Key columns DataFrame.
        DataFrame: Target DataFrame (if prod is False).
        DataFrame: Features DataFrame.
    """
    
    # Convert column names to lowercase
    data_df = df.select([F.col(x).alias(x.lower()) for x in df.columns])
    
    # Aggregation by zip5_cd
    zip5_data = data_df.groupBy('zip5_cd').agg(
        F.sum('pq_cleu_ga_1mth').alias('zip5_cleu_sum'),
        F.sum('pq_nl_ga_1mth').alias('zip5_nl_ga_sum'),
        F.sum('pq_base_ga_1mth').alias('zip5_base_ga_sum'),
        F.sum('pq_lis_1mth').alias('zip5_lis_sum'),
        F.sum('qes_score').alias('zip5_qes_score_sum')
    )
    
    # Handling 'zip4_cd' null values and creating 'zip54_cd'
    data_df = data_df.withColumn('zip4_cd', F.coalesce(F.col('zip4_cd'), F.lit('none')))
    data_df = data_df.withColumn('zip54_cd', F.concat(F.col('zip5_cd'), F.lit('_'), F.col('zip4_cd')))
    
    # Aggregation by zip54_cd
    zip54_data = data_df.groupBy('zip54_cd').agg(
        F.sum('pq_cleu_ga_1mth').alias('zip54_cleu_sum'),
        F.sum('pq_nl_ga_1mth').alias('zip54_nl_ga_sum'),
        F.sum('pq_base_ga_1mth').alias('zip54_base_ga_sum'),
        F.sum('pq_lis_1mth').alias('zip54_lis_sum'),
        F.sum('qes_score').alias('zip54_qes_score_sum')
    ).withColumn('zip5_cd', F.expr("substring(zip54_cd, 1, 5)")).withColumn('zip4_cd', F.expr("substring(zip54_cd, 7, length(zip54_cd))"))
    
    # Merging dataframes
    data_df = data_df.join(zip5_data, on='zip5_cd', how='left')\
                     .join(zip54_data, on=['zip5_cd', 'zip4_cd', 'zip54_cd'], how='left')

    # Set the 'base_ga_future_3mth' for non-prod data
    if not prod:
        data_df = data_df.withColumn('base_ga_future_3mth', F.col('cleu_ga_3mth'))
    
    # Defining columns for features and target based on prod or non-prod
    if not prod:
        cols = ['rpt_mth', 'duns_loc_num', 'zip5_cd', 'zip4_cd', 'zip54_cd', 'emp_tot_num', 'lat_num', 'long_num', 'naics_cd1', 
                'wireless_bill_tot_amt', 'mob_emp_tot_loc_num', 'mob_broadband_bill_tot_amt', 'pq_cleu_ga_1mth', 'pq_nl_ga_1mth', 
                'pq_base_ga_1mth', 'pq_phone_ga_1mth', 'pq_tablet_ga_1mth', 'pq_mbb_ga_1mth', 'pq_lis_1mth', 'pq_tablet_lis_1mth',
                'pq_mbb_lis_1mth', 'pq_smartphone_lis_1mth', 'base_ga_future_3mth', 'base_ga_previous_1mth', 'lis_target_end_mth', 
                'base_ga_3mth', 'nl_ga_3mth', 'zip5_cleu_sum', 'zip5_nl_ga_sum', 'zip5_base_ga_sum', 'zip5_lis_sum', 
                'zip5_qes_score_sum', 'zip54_cleu_sum', 'zip54_nl_ga_sum', 'zip54_base_ga_sum', 'zip54_lis_sum', 
                'zip54_qes_score_sum', 'pq_cleu_ga_3mth', 'pq_nl_ga_3mth', 'pq_base_ga_3mth', 'pq_phone_ga_3mth', 'pq_tablet_ga_3mth',
                'pq_mbb_ga_3mth', 'pq_lis_3mth', 'pq_tablet_lis_3mth', 'pq_mbb_lis_3mth', 'pq_smartphone_lis_3mth', 
                'chgd_wireless_provider_index', 'city_nm', 'base_yr_emp', 'base_yr_sls', 'bus_nm', 'ceo_title', 'pct_growth_emp', 
                'pct_growth_sls', 'population_cd', 'marketable_ind', 'residence_cd', 'segmt_cd', 'sls_cd', 'sls_tot', 'subsidiary_cd', 
                'st_cnty_cd', 'territory_cd', 'trend_yr_emp', 'trend_yr_sls', 'wireless_data_apps_index', 'wireless_push_to_talk_index', 
                'wireless_voice_apps_index', 'business_age', 'ratio_cleu_subs_p_1mth', 'ratio_cleu_subs_p_3mth', 'total_employee_count', 
                'annual_revenue', 'vz_connect', 'intent_mobility_10', 'intent_wls_bi_10', 'intent_networks_10', 'wireless_12_month_spend', 
                'wireline_12_month_spend', 'connect_12_month_spend', 'fg_customer_loc', 'fg_pro_10', 'ltebi_lq_10', 'exist_ltebi_customer_10', 
                'ltebi_wfh_10', 'wls_promo_10', 'ports_lines', 'linkedin_jobs_posted', 'linkedin_hiring_10', 'wls_wallet_share', 
                'wln_wallet_share', 'fios_loc', 'covered_prc', 'nfs_voice_perc', 'nfs_data_perc', 'future_5g_availability_10', 
                'zip5_duns_cnt', 'zip5_vz_cust_cnt', 'zip5_prospect_cnt', 'zip54_duns_cnt', 'zip54_vz_cust_cnt', 'zip54_prospect_cnt', 
                'wln_rel', 'con_rel', 'has_vz_rel', 'wln_ser_loc', 'vz_hq_rel', 'jb_lis_1mth', 'qes_score']
    else:
        cols = ['rpt_mth', 'duns_loc_num', 'zip5_cd', 'zip4_cd', 'zip54_cd', 'emp_tot_num', 'lat_num', 'long_num', 'naics_cd1', 
                'wireless_bill_tot_amt', 'mob_emp_tot_loc_num', 'mob_broadband_bill_tot_amt', 'pq_cleu_ga_1mth', 'pq_nl_ga_1mth', 
                'pq_base_ga_1mth', 'pq_phone_ga_1mth', 'pq_tablet_ga_1mth', 'pq_mbb_ga_1mth', 'pq_lis_1mth', 'pq_tablet_lis_1mth', 
                'pq_mbb_lis_1mth', 'pq_smartphone_lis_1mth', 'base_ga_previous_1mth', 'zip5_cleu_sum', 'zip5_nl_ga_sum', 'zip5_base_ga_sum', 
                'zip5_lis_sum', 'zip5_qes_score_sum', 'zip54_cleu_sum', 'zip54_nl_ga_sum', 'zip54_base_ga_sum', 'zip54_lis_sum', 
                'zip54_qes_score_sum', 'pq_cleu_ga_3mth', 'pq_nl_ga_3mth', 'pq_base_ga_3mth', 'pq_phone_ga_3mth', 'pq_tablet_ga_3mth', 
                'pq_mbb_ga_3mth', 'pq_lis_3mth', 'pq_tablet_lis_3mth', 'pq_mbb_lis_3mth', 'pq_smartphone_lis_3mth', 
                'chgd_wireless_provider_index', 'city_nm', 'base_yr_emp', 'base_yr_sls', 'bus_nm', 'ceo_title', 'pct_growth_emp', 
                'pct_growth_sls', 'population_cd', 'marketable_ind', 'residence_cd', 'segmt_cd', 'sls_cd', 'sls_tot', 'subsidiary_cd', 
               
